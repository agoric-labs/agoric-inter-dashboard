diff --git a/target_bigquery/core.py b/target_bigquery/core.py
index 63ff9b0..16e39e8 100644
--- a/target_bigquery/core.py
+++ b/target_bigquery/core.py
@@ -38,7 +38,7 @@ from tempfile import TemporaryFile
 from textwrap import dedent, indent
 from typing import IO, TYPE_CHECKING, Any, Dict, Iterable, List, Optional, Tuple, Type, Union
 
-from google.api_core.exceptions import Conflict
+from google.api_core.exceptions import Conflict, Forbidden
 from google.cloud import bigquery, bigquery_storage_v1, storage
 from google.cloud.bigquery import SchemaField
 from google.cloud.bigquery.table import TimePartitioning, TimePartitioningType
@@ -170,7 +170,7 @@ class BigQueryTable:
                 self._dataset = client.create_dataset(
                     self.as_dataset(**kwargs["dataset"]), exists_ok=False
                 )
-            except Conflict:
+            except (Conflict, Forbidden):
                 dataset = client.get_dataset(self.as_dataset(**kwargs["dataset"]))
                 if dataset.location != kwargs["dataset"]["location"]:
                     raise Exception(
@@ -198,7 +198,6 @@ class BigQueryTable:
         """Returns the default table options for this table."""
         schema_dump = json.dumps(self.jsonschema)
         return {
-            "clustering_fields": ["_sdc_batched_at"],
             "description": (
                 "Generated by target-bigquery.\nStream Schema\n{schema}\nBigQuery Ingestion"
                 " Strategy: {strategy}".format(
@@ -209,7 +208,7 @@ class BigQueryTable:
                 )
             ),
             "time_partitioning": TimePartitioning(
-                type_=TimePartitioningType.MONTH, field="_sdc_batched_at"
+                type_=TimePartitioningType.MONTH, field="block_time"
             ),
         }
 
@@ -452,13 +451,13 @@ class BaseBigQuerySink(BatchSink):
         """Create the table in BigQuery."""
         kwargs = {"table": {}, "dataset": {}}
         # Table opts
-        if key_properties and self.config.get("cluster_on_key_properties", False):
-            kwargs["table"]["clustering_fields"] = key_properties[:4]
+        if key_properties and self.config.get("cluster_on_key_properties", False) and len(key_properties) > 0:
+            kwargs["table"]["clustering_fields"] = tuple(key_properties[:4])
         partition_grain: str = self.config.get("partition_granularity")
         if partition_grain:
             kwargs["table"]["time_partitioning"] = TimePartitioning(
                 type_=PARTITION_STRATEGY[partition_grain.upper()],
-                field="_sdc_batched_at",
+                field="block_time",
             )
         # Dataset opts
         location: str = self.config.get(
