// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package writetailconfigs

import (
	"context"
	"p2p-tendermint-trigger/model"
	"sync"
)

// Ensure, that EnvMock does implement Env.
// If this is not the case, regenerate this file with moq.
var _ Env = &EnvMock{}

// EnvMock is a mock implementation of Env.
//
//	func TestSomethingThatUsesEnv(t *testing.T) {
//
//		// make and configure a mocked Env
//		mockedEnv := &EnvMock{
//			GetBatchSizeFunc: func() int64 {
//				panic("mock out the GetBatchSize method")
//			},
//			GetEarliestDBHeightFunc: func(ctx context.Context) (*int64, error) {
//				panic("mock out the GetEarliestDBHeight method")
//			},
//			GetEarliestStatusHeightFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the GetEarliestStatusHeight method")
//			},
//			GetMaxWriteCountFunc: func() int {
//				panic("mock out the GetMaxWriteCount method")
//			},
//			WriteConfigFunc: func(rg model.HeightRange) error {
//				panic("mock out the WriteConfig method")
//			},
//		}
//
//		// use mockedEnv in code that requires Env
//		// and then make assertions.
//
//	}
type EnvMock struct {
	// GetBatchSizeFunc mocks the GetBatchSize method.
	GetBatchSizeFunc func() int64

	// GetEarliestDBHeightFunc mocks the GetEarliestDBHeight method.
	GetEarliestDBHeightFunc func(ctx context.Context) (*int64, error)

	// GetEarliestStatusHeightFunc mocks the GetEarliestStatusHeight method.
	GetEarliestStatusHeightFunc func(ctx context.Context) (int64, error)

	// GetMaxWriteCountFunc mocks the GetMaxWriteCount method.
	GetMaxWriteCountFunc func() int

	// WriteConfigFunc mocks the WriteConfig method.
	WriteConfigFunc func(rg model.HeightRange) error

	// calls tracks calls to the methods.
	calls struct {
		// GetBatchSize holds details about calls to the GetBatchSize method.
		GetBatchSize []struct {
		}
		// GetEarliestDBHeight holds details about calls to the GetEarliestDBHeight method.
		GetEarliestDBHeight []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetEarliestStatusHeight holds details about calls to the GetEarliestStatusHeight method.
		GetEarliestStatusHeight []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetMaxWriteCount holds details about calls to the GetMaxWriteCount method.
		GetMaxWriteCount []struct {
		}
		// WriteConfig holds details about calls to the WriteConfig method.
		WriteConfig []struct {
			// Rg is the rg argument value.
			Rg model.HeightRange
		}
	}
	lockGetBatchSize            sync.RWMutex
	lockGetEarliestDBHeight     sync.RWMutex
	lockGetEarliestStatusHeight sync.RWMutex
	lockGetMaxWriteCount        sync.RWMutex
	lockWriteConfig             sync.RWMutex
}

// GetBatchSize calls GetBatchSizeFunc.
func (mock *EnvMock) GetBatchSize() int64 {
	if mock.GetBatchSizeFunc == nil {
		panic("EnvMock.GetBatchSizeFunc: method is nil but Env.GetBatchSize was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBatchSize.Lock()
	mock.calls.GetBatchSize = append(mock.calls.GetBatchSize, callInfo)
	mock.lockGetBatchSize.Unlock()
	return mock.GetBatchSizeFunc()
}

// GetBatchSizeCalls gets all the calls that were made to GetBatchSize.
// Check the length with:
//
//	len(mockedEnv.GetBatchSizeCalls())
func (mock *EnvMock) GetBatchSizeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBatchSize.RLock()
	calls = mock.calls.GetBatchSize
	mock.lockGetBatchSize.RUnlock()
	return calls
}

// GetEarliestDBHeight calls GetEarliestDBHeightFunc.
func (mock *EnvMock) GetEarliestDBHeight(ctx context.Context) (*int64, error) {
	if mock.GetEarliestDBHeightFunc == nil {
		panic("EnvMock.GetEarliestDBHeightFunc: method is nil but Env.GetEarliestDBHeight was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetEarliestDBHeight.Lock()
	mock.calls.GetEarliestDBHeight = append(mock.calls.GetEarliestDBHeight, callInfo)
	mock.lockGetEarliestDBHeight.Unlock()
	return mock.GetEarliestDBHeightFunc(ctx)
}

// GetEarliestDBHeightCalls gets all the calls that were made to GetEarliestDBHeight.
// Check the length with:
//
//	len(mockedEnv.GetEarliestDBHeightCalls())
func (mock *EnvMock) GetEarliestDBHeightCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetEarliestDBHeight.RLock()
	calls = mock.calls.GetEarliestDBHeight
	mock.lockGetEarliestDBHeight.RUnlock()
	return calls
}

// GetEarliestStatusHeight calls GetEarliestStatusHeightFunc.
func (mock *EnvMock) GetEarliestStatusHeight(ctx context.Context) (int64, error) {
	if mock.GetEarliestStatusHeightFunc == nil {
		panic("EnvMock.GetEarliestStatusHeightFunc: method is nil but Env.GetEarliestStatusHeight was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetEarliestStatusHeight.Lock()
	mock.calls.GetEarliestStatusHeight = append(mock.calls.GetEarliestStatusHeight, callInfo)
	mock.lockGetEarliestStatusHeight.Unlock()
	return mock.GetEarliestStatusHeightFunc(ctx)
}

// GetEarliestStatusHeightCalls gets all the calls that were made to GetEarliestStatusHeight.
// Check the length with:
//
//	len(mockedEnv.GetEarliestStatusHeightCalls())
func (mock *EnvMock) GetEarliestStatusHeightCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetEarliestStatusHeight.RLock()
	calls = mock.calls.GetEarliestStatusHeight
	mock.lockGetEarliestStatusHeight.RUnlock()
	return calls
}

// GetMaxWriteCount calls GetMaxWriteCountFunc.
func (mock *EnvMock) GetMaxWriteCount() int {
	if mock.GetMaxWriteCountFunc == nil {
		panic("EnvMock.GetMaxWriteCountFunc: method is nil but Env.GetMaxWriteCount was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMaxWriteCount.Lock()
	mock.calls.GetMaxWriteCount = append(mock.calls.GetMaxWriteCount, callInfo)
	mock.lockGetMaxWriteCount.Unlock()
	return mock.GetMaxWriteCountFunc()
}

// GetMaxWriteCountCalls gets all the calls that were made to GetMaxWriteCount.
// Check the length with:
//
//	len(mockedEnv.GetMaxWriteCountCalls())
func (mock *EnvMock) GetMaxWriteCountCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMaxWriteCount.RLock()
	calls = mock.calls.GetMaxWriteCount
	mock.lockGetMaxWriteCount.RUnlock()
	return calls
}

// WriteConfig calls WriteConfigFunc.
func (mock *EnvMock) WriteConfig(rg model.HeightRange) error {
	if mock.WriteConfigFunc == nil {
		panic("EnvMock.WriteConfigFunc: method is nil but Env.WriteConfig was just called")
	}
	callInfo := struct {
		Rg model.HeightRange
	}{
		Rg: rg,
	}
	mock.lockWriteConfig.Lock()
	mock.calls.WriteConfig = append(mock.calls.WriteConfig, callInfo)
	mock.lockWriteConfig.Unlock()
	return mock.WriteConfigFunc(rg)
}

// WriteConfigCalls gets all the calls that were made to WriteConfig.
// Check the length with:
//
//	len(mockedEnv.WriteConfigCalls())
func (mock *EnvMock) WriteConfigCalls() []struct {
	Rg model.HeightRange
} {
	var calls []struct {
		Rg model.HeightRange
	}
	mock.lockWriteConfig.RLock()
	calls = mock.calls.WriteConfig
	mock.lockWriteConfig.RUnlock()
	return calls
}
