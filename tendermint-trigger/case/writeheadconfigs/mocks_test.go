// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package writeheadconfigs

import (
	"context"
	"p2p-tendermint-trigger/model"
	"sync"
)

// Ensure, that EnvMock does implement Env.
// If this is not the case, regenerate this file with moq.
var _ Env = &EnvMock{}

// EnvMock is a mock implementation of Env.
//
//	func TestSomethingThatUsesEnv(t *testing.T) {
//
//		// make and configure a mocked Env
//		mockedEnv := &EnvMock{
//			GetBatchSizeFunc: func() int64 {
//				panic("mock out the GetBatchSize method")
//			},
//			GetLatestDBHeightFunc: func(ctx context.Context) (*int64, error) {
//				panic("mock out the GetLatestDBHeight method")
//			},
//			GetLatestStatusHeightFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the GetLatestStatusHeight method")
//			},
//			GetMaxWriteCountFunc: func() int {
//				panic("mock out the GetMaxWriteCount method")
//			},
//			WaitNextBlockFunc: func() error {
//				panic("mock out the WaitNextBlock method")
//			},
//			WriteConfigFunc: func(rg model.HeightRange) error {
//				panic("mock out the WriteConfig method")
//			},
//		}
//
//		// use mockedEnv in code that requires Env
//		// and then make assertions.
//
//	}
type EnvMock struct {
	// GetBatchSizeFunc mocks the GetBatchSize method.
	GetBatchSizeFunc func() int64

	// GetLatestDBHeightFunc mocks the GetLatestDBHeight method.
	GetLatestDBHeightFunc func(ctx context.Context) (*int64, error)

	// GetLatestStatusHeightFunc mocks the GetLatestStatusHeight method.
	GetLatestStatusHeightFunc func(ctx context.Context) (int64, error)

	// GetMaxWriteCountFunc mocks the GetMaxWriteCount method.
	GetMaxWriteCountFunc func() int

	// WaitNextBlockFunc mocks the WaitNextBlock method.
	WaitNextBlockFunc func() error

	// WriteConfigFunc mocks the WriteConfig method.
	WriteConfigFunc func(rg model.HeightRange) error

	// calls tracks calls to the methods.
	calls struct {
		// GetBatchSize holds details about calls to the GetBatchSize method.
		GetBatchSize []struct {
		}
		// GetLatestDBHeight holds details about calls to the GetLatestDBHeight method.
		GetLatestDBHeight []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetLatestStatusHeight holds details about calls to the GetLatestStatusHeight method.
		GetLatestStatusHeight []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetMaxWriteCount holds details about calls to the GetMaxWriteCount method.
		GetMaxWriteCount []struct {
		}
		// WaitNextBlock holds details about calls to the WaitNextBlock method.
		WaitNextBlock []struct {
		}
		// WriteConfig holds details about calls to the WriteConfig method.
		WriteConfig []struct {
			// Rg is the rg argument value.
			Rg model.HeightRange
		}
	}
	lockGetBatchSize          sync.RWMutex
	lockGetLatestDBHeight     sync.RWMutex
	lockGetLatestStatusHeight sync.RWMutex
	lockGetMaxWriteCount      sync.RWMutex
	lockWaitNextBlock         sync.RWMutex
	lockWriteConfig           sync.RWMutex
}

// GetBatchSize calls GetBatchSizeFunc.
func (mock *EnvMock) GetBatchSize() int64 {
	if mock.GetBatchSizeFunc == nil {
		panic("EnvMock.GetBatchSizeFunc: method is nil but Env.GetBatchSize was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBatchSize.Lock()
	mock.calls.GetBatchSize = append(mock.calls.GetBatchSize, callInfo)
	mock.lockGetBatchSize.Unlock()
	return mock.GetBatchSizeFunc()
}

// GetBatchSizeCalls gets all the calls that were made to GetBatchSize.
// Check the length with:
//
//	len(mockedEnv.GetBatchSizeCalls())
func (mock *EnvMock) GetBatchSizeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBatchSize.RLock()
	calls = mock.calls.GetBatchSize
	mock.lockGetBatchSize.RUnlock()
	return calls
}

// GetLatestDBHeight calls GetLatestDBHeightFunc.
func (mock *EnvMock) GetLatestDBHeight(ctx context.Context) (*int64, error) {
	if mock.GetLatestDBHeightFunc == nil {
		panic("EnvMock.GetLatestDBHeightFunc: method is nil but Env.GetLatestDBHeight was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestDBHeight.Lock()
	mock.calls.GetLatestDBHeight = append(mock.calls.GetLatestDBHeight, callInfo)
	mock.lockGetLatestDBHeight.Unlock()
	return mock.GetLatestDBHeightFunc(ctx)
}

// GetLatestDBHeightCalls gets all the calls that were made to GetLatestDBHeight.
// Check the length with:
//
//	len(mockedEnv.GetLatestDBHeightCalls())
func (mock *EnvMock) GetLatestDBHeightCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetLatestDBHeight.RLock()
	calls = mock.calls.GetLatestDBHeight
	mock.lockGetLatestDBHeight.RUnlock()
	return calls
}

// GetLatestStatusHeight calls GetLatestStatusHeightFunc.
func (mock *EnvMock) GetLatestStatusHeight(ctx context.Context) (int64, error) {
	if mock.GetLatestStatusHeightFunc == nil {
		panic("EnvMock.GetLatestStatusHeightFunc: method is nil but Env.GetLatestStatusHeight was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestStatusHeight.Lock()
	mock.calls.GetLatestStatusHeight = append(mock.calls.GetLatestStatusHeight, callInfo)
	mock.lockGetLatestStatusHeight.Unlock()
	return mock.GetLatestStatusHeightFunc(ctx)
}

// GetLatestStatusHeightCalls gets all the calls that were made to GetLatestStatusHeight.
// Check the length with:
//
//	len(mockedEnv.GetLatestStatusHeightCalls())
func (mock *EnvMock) GetLatestStatusHeightCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetLatestStatusHeight.RLock()
	calls = mock.calls.GetLatestStatusHeight
	mock.lockGetLatestStatusHeight.RUnlock()
	return calls
}

// GetMaxWriteCount calls GetMaxWriteCountFunc.
func (mock *EnvMock) GetMaxWriteCount() int {
	if mock.GetMaxWriteCountFunc == nil {
		panic("EnvMock.GetMaxWriteCountFunc: method is nil but Env.GetMaxWriteCount was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMaxWriteCount.Lock()
	mock.calls.GetMaxWriteCount = append(mock.calls.GetMaxWriteCount, callInfo)
	mock.lockGetMaxWriteCount.Unlock()
	return mock.GetMaxWriteCountFunc()
}

// GetMaxWriteCountCalls gets all the calls that were made to GetMaxWriteCount.
// Check the length with:
//
//	len(mockedEnv.GetMaxWriteCountCalls())
func (mock *EnvMock) GetMaxWriteCountCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMaxWriteCount.RLock()
	calls = mock.calls.GetMaxWriteCount
	mock.lockGetMaxWriteCount.RUnlock()
	return calls
}

// WaitNextBlock calls WaitNextBlockFunc.
func (mock *EnvMock) WaitNextBlock() error {
	if mock.WaitNextBlockFunc == nil {
		panic("EnvMock.WaitNextBlockFunc: method is nil but Env.WaitNextBlock was just called")
	}
	callInfo := struct {
	}{}
	mock.lockWaitNextBlock.Lock()
	mock.calls.WaitNextBlock = append(mock.calls.WaitNextBlock, callInfo)
	mock.lockWaitNextBlock.Unlock()
	return mock.WaitNextBlockFunc()
}

// WaitNextBlockCalls gets all the calls that were made to WaitNextBlock.
// Check the length with:
//
//	len(mockedEnv.WaitNextBlockCalls())
func (mock *EnvMock) WaitNextBlockCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockWaitNextBlock.RLock()
	calls = mock.calls.WaitNextBlock
	mock.lockWaitNextBlock.RUnlock()
	return calls
}

// WriteConfig calls WriteConfigFunc.
func (mock *EnvMock) WriteConfig(rg model.HeightRange) error {
	if mock.WriteConfigFunc == nil {
		panic("EnvMock.WriteConfigFunc: method is nil but Env.WriteConfig was just called")
	}
	callInfo := struct {
		Rg model.HeightRange
	}{
		Rg: rg,
	}
	mock.lockWriteConfig.Lock()
	mock.calls.WriteConfig = append(mock.calls.WriteConfig, callInfo)
	mock.lockWriteConfig.Unlock()
	return mock.WriteConfigFunc(rg)
}

// WriteConfigCalls gets all the calls that were made to WriteConfig.
// Check the length with:
//
//	len(mockedEnv.WriteConfigCalls())
func (mock *EnvMock) WriteConfigCalls() []struct {
	Rg model.HeightRange
} {
	var calls []struct {
		Rg model.HeightRange
	}
	mock.lockWriteConfig.RLock()
	calls = mock.calls.WriteConfig
	mock.lockWriteConfig.RUnlock()
	return calls
}
