// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeP2pTendermintSourceModels(in *jlexer.Lexer, out *ValidatorsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block_height":
			out.BlockHeight = string(in.String())
		case "count":
			out.Count = string(in.String())
		case "total":
			out.Total = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeP2pTendermintSourceModels(out *jwriter.Writer, in ValidatorsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"block_height\":"
		out.RawString(prefix[1:])
		out.String(string(in.BlockHeight))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.String(string(in.Count))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.String(string(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValidatorsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeP2pTendermintSourceModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValidatorsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeP2pTendermintSourceModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValidatorsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeP2pTendermintSourceModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValidatorsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeP2pTendermintSourceModels(l, v)
}
func easyjsonD2b7633eDecodeP2pTendermintSourceModels1(in *jlexer.Lexer, out *SquashGroupData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(SquashGroupData)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 []easyjson.RawMessage
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				in.Delim('[')
				if v1 == nil {
					if !in.IsDelim(']') {
						v1 = make([]easyjson.RawMessage, 0, 2)
					} else {
						v1 = []easyjson.RawMessage{}
					}
				} else {
					v1 = (v1)[:0]
				}
				for !in.IsDelim(']') {
					var v2 easyjson.RawMessage
					(v2).UnmarshalEasyJSON(in)
					v1 = append(v1, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeP2pTendermintSourceModels1(out *jwriter.Writer, in SquashGroupData) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v3First := true
		for v3Name, v3Value := range in {
			if v3First {
				v3First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v3Name))
			out.RawByte(':')
			if v3Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v4, v5 := range v3Value {
					if v4 > 0 {
						out.RawByte(',')
					}
					(v5).MarshalEasyJSON(out)
				}
				out.RawByte(']')
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SquashGroupData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeP2pTendermintSourceModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SquashGroupData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeP2pTendermintSourceModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SquashGroupData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeP2pTendermintSourceModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SquashGroupData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeP2pTendermintSourceModels1(l, v)
}
func easyjsonD2b7633eDecodeP2pTendermintSourceModels2(in *jlexer.Lexer, out *SquashGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			out.Height = string(in.String())
		case "entities":
			(out.Entities).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeP2pTendermintSourceModels2(out *jwriter.Writer, in SquashGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		out.String(string(in.Height))
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		(in.Entities).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SquashGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeP2pTendermintSourceModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SquashGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeP2pTendermintSourceModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SquashGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeP2pTendermintSourceModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SquashGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeP2pTendermintSourceModels2(l, v)
}
func easyjsonD2b7633eDecodeP2pTendermintSourceModels3(in *jlexer.Lexer, out *JSONRPCResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JSONRPC = string(in.StringIntern())
		case "id":
			out.ID = string(in.StringIntern())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "error":
			(out.Error).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeP2pTendermintSourceModels3(out *jwriter.Writer, in JSONRPCResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix[1:])
		out.String(string(in.JSONRPC))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	if (in.Result).IsDefined() {
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		(in.Result).MarshalEasyJSON(out)
	}
	if (in.Error).IsDefined() {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		(in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONRPCResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeP2pTendermintSourceModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONRPCResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeP2pTendermintSourceModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONRPCResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeP2pTendermintSourceModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONRPCResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeP2pTendermintSourceModels3(l, v)
}
func easyjsonD2b7633eDecodeP2pTendermintSourceModels4(in *jlexer.Lexer, out *JSONRPCBatchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(JSONRPCBatchResponse, 0, 8)
			} else {
				*out = JSONRPCBatchResponse{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v6 *JSONRPCResponse
			if in.IsNull() {
				in.Skip()
				v6 = nil
			} else {
				if v6 == nil {
					v6 = new(JSONRPCResponse)
				}
				(*v6).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v6)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeP2pTendermintSourceModels4(out *jwriter.Writer, in JSONRPCBatchResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v7, v8 := range in {
			if v7 > 0 {
				out.RawByte(',')
			}
			if v8 == nil {
				out.RawString("null")
			} else {
				(*v8).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JSONRPCBatchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeP2pTendermintSourceModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONRPCBatchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeP2pTendermintSourceModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONRPCBatchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeP2pTendermintSourceModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONRPCBatchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeP2pTendermintSourceModels4(l, v)
}
func easyjsonD2b7633eDecodeP2pTendermintSourceModels5(in *jlexer.Lexer, out *AirbyteRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stream":
			out.Stream = string(in.String())
		case "emitted_at":
			out.EmittedAt = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeP2pTendermintSourceModels5(out *jwriter.Writer, in AirbyteRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stream\":"
		out.RawString(prefix[1:])
		out.String(string(in.Stream))
	}
	{
		const prefix string = ",\"emitted_at\":"
		out.RawString(prefix)
		out.String(string(in.EmittedAt))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AirbyteRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeP2pTendermintSourceModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AirbyteRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeP2pTendermintSourceModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AirbyteRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeP2pTendermintSourceModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AirbyteRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeP2pTendermintSourceModels5(l, v)
}
func easyjsonD2b7633eDecodeP2pTendermintSourceModels6(in *jlexer.Lexer, out *AirbyteMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "record":
			if in.IsNull() {
				in.Skip()
				out.Record = nil
			} else {
				if out.Record == nil {
					out.Record = new(AirbyteRecord)
				}
				(*out.Record).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeP2pTendermintSourceModels6(out *jwriter.Writer, in AirbyteMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"record\":"
		out.RawString(prefix)
		if in.Record == nil {
			out.RawString("null")
		} else {
			(*in.Record).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AirbyteMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeP2pTendermintSourceModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AirbyteMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeP2pTendermintSourceModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AirbyteMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeP2pTendermintSourceModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AirbyteMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeP2pTendermintSourceModels6(l, v)
}
